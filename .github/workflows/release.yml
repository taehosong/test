name: "Release"

on: # yamllint disable-line rule:truthy
  push:
    tags:
      - "**"

jobs:
  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3"
      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
      - name: "flatbuffer transform"
      - run: ./tools/flatc --kotlin --gen-all -o kotlin definitions/ethersCommand/main.fbs
      - run: ./tools/flatc --swift --gen-all -o swift definitions/ethersCommand/main.fbs
      - run: cp -r web kotlin/
      - run: cp -r web swift/
      - run: zip -r kotlin.zip kotlin
      - run: zip -r swift.zip swift

      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: "Upload release asset"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const fs = require('fs');
              await github.rest.repos.uploadReleaseAsset({
                data: fs.readFileSync('kotlin.zip'),
                headers: {
                  'content-type': 'application/zip',
                },
                name: `kotlin-${process.env.RELEASE_ID}.zip`,
                owner: context.repo.owner,
                release_id: process.env.RELEASE_ID
                repo: context.repo.repo,
              });

              await github.rest.repos.uploadReleaseAsset({
                data: fs.readFileSync('swift.zip'),
                headers: {
                  'content-type': 'application/zip',
                },
                name: `swift-${process.env.RELEASE_ID}.zip`,
                owner: context.repo.owner,
                release_id: process.env.RELEASE_ID
                repo: context.repo.repo,
              });

            } catch (error) {
              core.setFailed(error.message);
            }

